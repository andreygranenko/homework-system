// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  password  String?  
  accounts  Account[]
  sessions  Session[]

  // Relations
  submittedHomeworks Homework[] @relation("StudentHomeworks")
  reviewedHomeworks  Homework[] @relation("TeacherHomeworks")
  subjects           Subject[]  @relation("TeacherSubjects")

  @@map("users")
}

model Subject {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  teacher   User       @relation("TeacherSubjects", fields: [teacherId], references: [id])
  teacherId String
  homeworks Homework[]

  @@map("subjects")
}

model Homework {
  id          String         @id @default(cuid())
  title       String
  description String?
  content     String
  dueDate     DateTime?
  status      HomeworkStatus @default(PENDING)
  grade       String?
  feedback    String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  student   User    @relation("StudentHomeworks", fields: [studentId], references: [id])
  studentId String
  teacher   User?   @relation("TeacherHomeworks", fields: [teacherId], references: [id])
  teacherId String?
  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String

  attachments Attachment[]

  @@map("homeworks")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Attachment {
  id         String   @id @default(cuid())
  filename   String
  originalName String
  mimeType   String
  size       Int
  url        String
  createdAt  DateTime @default(now())

  // Relations
  homework   Homework @relation(fields: [homeworkId], references: [id], onDelete: Cascade)
  homeworkId String

  @@map("attachments")
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum HomeworkStatus {
  PENDING
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  NEEDS_REVISION
}